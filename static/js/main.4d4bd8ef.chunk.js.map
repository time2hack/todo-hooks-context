{"version":3,"sources":["components/Header.js","TodoContext.js","components/Todos.js","components/NewTask.js","config.js","_initial.js","App.js","serviceWorker.js","index.js"],"names":["app","className","href","url","src","logo","height","alt","title","Config","React","createContext","displayName","Todo","task","extra","text","description","Date","createdOn","toUTCString","tasks","conf","useContext","sort","sorter","map","index","key","addTodo","onSubmit","e","preventDefault","formData","FormData","target","console","log","get","reset","htmlFor","name","type","id","config","sortBy","sortOrder","ASC","a","b","DESC","post","App","useState","_tasks","updateTasks","Provider","value","Header","NewTask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d4bd8ef.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default ({ app }) => (\n  <header className=\"mb-3\">\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <div className=\"container\">\n        <a className=\"navbar-brand\" href={app.url}>\n          <img src={app.logo} height=\"30\" alt={app.title} />\n        </a>\n      </div>\n    </nav>\n  </header>\n);\n","import React from \"react\";\n\nconst Config = React.createContext({});\nConfig.displayName = \"Config\";\n\nexport default Config;\n","import React, { useContext } from \"react\";\nimport Config from \"../TodoContext\";\n\nexport const Todo = ({ task, ...extra }) => (\n  <div className=\"card mb-3 bt-3\" {...extra}>\n    <div className=\"card-body\">\n      <h5 className=\"card-title\">{task.text}</h5>\n      <p className=\"card-text\">{task.description}</p>\n      <div className=\"footer\">\n        <small>{new Date(task.createdOn).toUTCString()}</small>\n      </div>\n    </div>\n  </div>\n);\n\nexport default ({ tasks = [] }) => {\n  const conf = useContext(Config);\n\n  return (\n    <>\n      {tasks.sort(conf.sorter).map((task, index) => (\n        <Todo task={task} key={index} />\n      ))}\n    </>\n  );\n};\n","import React from \"react\";\n\nexport default ({ addTodo }) => {\n  const handleAdd = e => {\n    e.preventDefault();\n    // we need data from Form; for that we can use FormData API\n    const formData = new FormData(e.target);\n    console.log(\"---Form---\", formData);\n    addTodo({\n      text: formData.get(\"text\"),\n      description: formData.get(\"description\"),\n      createdOn: +new Date()\n    });\n    e.target.reset();\n  };\n\n  return (\n    <form onSubmit={handleAdd}>\n      <div className=\"form-group\">\n        <label htmlFor=\"text\" className=\"text-muted\">\n          Task:\n        </label>\n        <input name=\"text\" type=\"text\" id=\"text\" className=\"form-control\" />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"description\" className=\"text-muted\">\n          Description:\n        </label>\n        <textarea\n          name=\"description\"\n          id=\"description\"\n          className=\"form-control\"\n        />\n      </div>\n      <div className=\"form-group\">\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Add\n        </button>\n      </div>\n    </form>\n  );\n};\n","const app = {\n  title: \"Time to Hack\",\n  url: \"https://time2hack.com\",\n  logo:\n    \"https://res.cloudinary.com/time2hack/image/upload/q_auto:good/t2h-text-banner.png\",\n  post: {\n    title: \"\",\n    url: \"\"\n  }\n};\n\nconst config = {\n  sortBy: \"createdOn\",\n  sortOrder: \"DESC\"\n};\n\nconst sorters = {\n  ASC: (a, b) => a[config.sortBy] - b[config.sortBy],\n  DESC: (a, b) => b[config.sortBy] - a[config.sortBy]\n};\n\nconst sorter = sorters[config.sortOrder];\n\nexport default {\n  ...config,\n  app,\n  sorter\n};\n","export default [\n  {\n    text: \"First Todo\",\n    description: \"First Todo's Description\",\n    createdOn: +new Date() + 1\n  },\n  {\n    text: \"Second Todo\",\n    description: \"Second Todo's Description\",\n    createdOn: +new Date() + 2\n  },\n  {\n    text: \"Third Todo\",\n    description: \"Third Todo's Description\",\n    createdOn: +new Date() + 3\n  }\n];\n","import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport ToDos from \"./components/Todos\";\nimport NewTask from \"./components/NewTask\";\nimport Config from \"./TodoContext\";\nimport config from \"./config\";\nimport _tasks from \"./_initial\";\n\nconst App = () => {\n  const [tasks, updateTasks] = useState(_tasks);\n\n  return (\n    <Config.Provider value={config}>\n      <Header app={config.app} />\n      <div className=\"container\">\n        <NewTask addTodo={task => updateTasks([...tasks, task])} />\n        <hr />\n        <ToDos tasks={tasks} />\n      </div>\n    </Config.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}